#!/bin/bash

# 색상 코드 정의 (printf를 사용)
RED=$(printf '\033[0;31m')
GREEN=$(printf '\033[0;32m')
YELLOW=$(printf '\033[0;33m')
BLUE=$(printf '\033[0;34m')
PURPLE=$(printf '\033[0;35m')
LIGHT_CYAN=$(printf '\033[1;36m')
NC=$(printf '\033[0m') # No Color

# 스크립트의 실제 위치를 찾기
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")

# 설정 파일 경로를 스크립트 위치에 상대적으로 설정
config_file="$SCRIPT_DIR/installApk.cfg"

# 파일에 경로가 저장되어 있는지 확인
if [ -f "$config_file" ]; then
    saved_path=$(grep "BASE_PATH=" "$config_file" | cut -d'=' -f2)
    saved_build_tools_path=$(grep "BUILD_TOOLS_PATH=" "$config_file" | cut -d'=' -f2)
else
    saved_path=""
    saved_build_tools_path=""
fi

# base 경로 저장 및 확인
if [ -z "$saved_path" ]; then
    read -p "룬스톤 코드 경로> " user_path

    # 입력받은 경로를 파일에 저장
    echo "BASE_PATH=$user_path" > "$config_file"
else
    user_path="$saved_path"
fi

# build-tools 경로 저장 및 확인
if [ -z "$saved_build_tools_path" ]; then
    read -p "Build-tools 경로> " build_tools_path

    # 입력받은 경로를 파일에 저장
    echo "BUILD_TOOLS_PATH=$build_tools_path" >> "$config_file"
else
    build_tools_path="$saved_build_tools_path"
fi

echo "사용할 경로: $user_path"
echo "Build-tools 경로: $build_tools_path"

# aapt 도구 경로 설정
aapt="$build_tools_path/aapt"

# adb devices 명령어를 실행하여 연결된 디바이스 목록을 가져옵니다.
devices=$(adb devices | grep -w 'device' | awk '{print $1}')

# 번호를 위한 카운터 초기화
counter=1
device_list=()

# 디바이스 목록을 순회합니다.
for device in $devices; do
    # 각 디바이스에 대해 adb shell에 접속하여 모델명을 확인합니다.
    model=$(adb -s "$device" shell getprop ro.product.model)

    # 번호와 함께 모델명과 디바이스 ID를 출력합니다.
    printf "%-3s %s%s%s (%s%s%s)\n" \
        "$counter)" \
        "${BLUE}$device${NC}" \
        "" \
        "" \
        "${GREEN}$model${NC}" \
        "" \
        ""

    # device_list에 디바이스 ID를 저장합니다.
    device_list+=("$device")

    # 카운터 증가
    counter=$((counter + 1))
done

# 사용자에게 기기 선택을 요청합니다.
read -p "APK를 설치할 기기를 선택해주세요> " selected_index

# 선택된 인덱스가 유효한지 확인합니다.
if [ "$selected_index" -ge 1 ] && [ "$selected_index" -le "${#device_list[@]}" ]; then
    selected_device=${device_list[$((selected_index-1))]}
    echo "선택된 기기: $selected_device"
else
    echo "잘못된 선택입니다. 스크립트를 다시 실행해주세요."
    exit 1
fi

# versionName을 특정 형식으로 변환하는 함수
format_version_name() {
    local version=$1
    if [[ $version =~ ^[0-9]+$ ]]; then
        # 365009000을 3.6.50.09.000 형식으로 변환
        echo "${version:0:1}.${version:1:1}.${version:2:2}.${version:4:2}.${version:6:3}"
    else
        # 숫자 형식이 아니면 그대로 반환
        echo "$version"
    fi
}

# 시간을 경과된 시간으로 변환하는 함수
elapsed_time() {
    local datetime=$1
    local current_time=$(date +%s)
    local file_time=$(date -d "$datetime" +%s)
    local diff=$((current_time - file_time))

    local days=$((diff / 86400))
    local hours=$(( (diff % 86400) / 3600 ))
    local minutes=$(( (diff % 3600) / 60 ))

    local elapsed=""

    if [ "$days" -gt 0 ]; then
        elapsed="${days}일 "
    fi
    if [ "$hours" -gt 0 ]; then
        elapsed="${elapsed}${hours}시간 "
    fi
    if [ "$minutes" -gt 0 ]; then
        elapsed="${elapsed}${minutes}분"
    fi

    echo "$elapsed전"
}

# base 경로 아래의 모든 폴더를 순회하며 apk 파일을 검색합니다.
apk_files=()

while IFS= read -r -d '' apk_file; do
    # 파일 크기 및 수정 날짜-시간을 가져옵니다.
    size=$(du -h "$apk_file" | cut -f1)
    datetime=$(stat -c %y "$apk_file" | cut -d'.' -f1)
    elapsed=$(elapsed_time "$datetime")

    # aapt 도구를 사용하여 versionName을 추출합니다.
    version_name=$("$aapt" dump badging "$apk_file" | grep versionName | awk -F"'" '/versionName/{print $4}')

    # versionName을 형식화
    formatted_version_name=$(format_version_name "$version_name")

    # 파일 이름과 함께 포맷된 문자열을 apk_files 배열에 저장합니다.
    apk_files+=("$datetime|$apk_file|$(basename "$apk_file")|$size|$datetime($elapsed)|$formatted_version_name")
done < <(find "$user_path" -type f -name "*.apk" -print0)

# APK 파일을 수정 날짜 기준으로 정렬합니다 (최근 파일 순).
IFS=$'\n' sorted_apk_files=($(sort -t'|' -k1,1r <<<"${apk_files[*]}"))
unset IFS

# 설치 가능한 APK 파일 목록을 출력합니다.
counter=1
echo "설치 가능한 APK 목록:"
for apk in "${sorted_apk_files[@]}"; do
    IFS='|' read -r datetime apk_path filename size date_elapsed version <<< "$apk"
    printf "%-3s %-50s %-15s %-40s [Version: %s]\n" \
        "$counter)" \
        "${BLUE}$filename${NC}" \
        "${GREEN}$size${NC}" \
        "${YELLOW}$date_elapsed${NC}" \
        "${LIGHT_CYAN}$version${NC}"
    apk_paths[$counter]=$apk_path
    counter=$((counter + 1))
done

# 설치할 APK를 선택하도록 요청합니다.
read -p "설치할 APK 번호를 선택해주세요> " apk_index

# 선택된 APK 인덱스가 유효한지 확인합니다.
if [ "$apk_index" -ge 1 ] && [ "$apk_index" -le "${#apk_paths[@]}" ]; then
    selected_apk=${apk_paths[$apk_index]}
    echo "선택된 APK: $selected_apk"

    # 선택된 기기에 APK를 설치합니다.
    adb -s "$selected_device" install "$selected_apk"
else
    echo "잘못된 선택입니다. 스크립트를 다시 실행해주세요."
    exit 1
fi
